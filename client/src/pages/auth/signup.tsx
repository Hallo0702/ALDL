import { NextPage } from 'next';
import { useRouter } from 'next/router';
import React, { useEffect, useRef, useState } from 'react';
import Head from 'next/head';
import FormInput from '../../components/common/FormInput';
import Button from '../../components/common/Button';
import { emailduplicate, signup } from '../../api/auth';
import { signup } from '../../api/auth';
import { createWallet } from '../../api/wallet';
import { requestEth } from '../../api/wallet';
import Link from 'next/link';
import Web3 from 'web3';
import { useRecoilState } from 'recoil';
import { userState } from '../../store/states';

async function createUser(
  email: string,
  password: string,
  name: string,
  nickname: string
): Promise<any> {
  const response = signup({ email, password, name, nickname });
}

const Signup: NextPage = ({}) => {
  const emailInputRef = useRef<HTMLInputElement>(null);
  const passwordInputRef = useRef<HTMLInputElement>(null);
  const passwordCkInputRef = useRef<HTMLInputElement>(null);
  const nameInputRef = useRef<HTMLInputElement>(null);
  const nicknameInputRef = useRef<HTMLInputElement>(null);

  const router = useRouter();

  const [user, setUserstate] = useRecoilState(userState);
  const [isEmailError, setIsEmailError] = useState(false);
  const [isPasswordError, setIsPasswordError] = useState(false);
  const [isPasswordCkError, setIsPasswordCkError] = useState(false);
  const [isNameError, setIsNameError] = useState(false);
  const [isNicknameError, setIsNicknameError] = useState(false);

  async function submitHandler(event: React.SyntheticEvent) {
    event.preventDefault();
    const enteredEmail = emailInputRef.current?.value || '';
    const enteredPassword = passwordInputRef.current?.value || '';
    const enteredName = nameInputRef.current?.value || '';
    const enteredNickname = nicknameInputRef.current?.value || '';

    try {
      if (!user.isLogined) {
        const response = await createUser(
          enteredEmail,
          enteredPassword,
          enteredName,
          enteredNickname
        );

        const web3 = new Web3(
          new Web3.providers.HttpProvider('http://43.200.253.174:3000')
        );
        const account = await web3.eth.accounts.create();
        const res = await web3.eth.accounts.privateKeyToAccount(
          account.privateKey
        );
        await createWallet({
          email: enteredEmail,
          address: res.address,
          privateKey: res.privateKey,
        });
        requestEth(res.address);
        router.replace('/auth/login');
      } else {
        router.replace('/');
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function checkHandler(
    event: React.ChangeEvent<HTMLInputElement>,
    select: string
  ) {
    // event.preventDefault();
    const enteredEmail = emailInputRef.current?.value || '';
    const enteredPassword = passwordInputRef.current?.value || '';
    const enteredPasswordCk = passwordCkInputRef.current?.value || '';
    const enteredName = nameInputRef.current?.value || '';
    const enteredNickname = nicknameInputRef.current?.value || '';

    switch (select) {
      case 'email':
        if (
          /^[A-Za-z0-9.\-_]+@([A-Za-z0-9-]+\.)+[A-Za-z]{2,6}$/.test(
            enteredEmail
          )
        ) {
          setIsEmailError(false);
        } else {
          setIsEmailError(true);
        }
        break;
      case 'password':
        if (/^(?=.*\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,}$/.test(enteredPassword)) {
          setIsPasswordError(false);
        } else {
          setIsPasswordError(true);
        }
        break;
      case 'passwordCk':
        if (enteredPassword === enteredPasswordCk) {
          setIsPasswordCkError(false);
        } else {
          setIsPasswordCkError(true);
        }
        break;
      case 'name':
        if (/^[가-힣]+$/.test(enteredName)) {
          setIsNameError(false);
        } else {
          setIsNameError(true);
        }
        break;
      case 'nickname':
        if (/^[a-zA-Zㄱ-힣0-9-_.]{2,8}$/.test(enteredNickname)) {
          setIsNicknameError(false);
        } else {
          setIsNicknameError(true);
        }
        break;
    }
  }

  return (
    <>
      <Head>
        <title>회원가입</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/images/logo.png" />
      </Head>
      <main>
        <div className="text-center font-custom font-bold text-lg text-black mb-12">
          회원가입
        </div>
        <form
          onSubmit={submitHandler}
          className="flex flex-col justify-center items-center"
        >
          <FormInput
            label="이메일"
            id="email"
            isError={isEmailError}
            errMsg="* 올바른 이메일 형식을 입력해주세요."
            // value={emailInputValue}
            onChange={(e) => checkHandler(e, 'email')}
            ref={emailInputRef}
          ></FormInput>
          <FormInput
            label="비밀번호"
            id="password"
            type="password"
            isError={isPasswordError}
            errMsg="* 영어, 숫자 혼합 8글자 이상의 비밀번호를 입력해주세요"
            // value={passwordInputValue}
            onChange={(e) => checkHandler(e, 'password')}
            ref={passwordInputRef}
          ></FormInput>
          <FormInput
            label="비밀번호 확인"
            id="passwordCk"
            type="password"
            isError={isPasswordCkError}
            errMsg="* 비밀번호를 다시 확인해주세요."
            // value={passwordCkInputValue}
            onChange={(e) => checkHandler(e, 'passwordCk')}
            ref={passwordCkInputRef}
          ></FormInput>
          <FormInput
            label="이름"
            id="name"
            isError={isNameError}
            errMsg="* 한글을 입력해주세요."
            // value={nameInputValue}
            onChange={(e) => checkHandler(e, 'name')}
            ref={nameInputRef}
          ></FormInput>
          <FormInput
            label="닉네임"
            id="nickname"
            isError={isNicknameError}
            errMsg="* 2~8글자의 닉네임을 입력해주세요."
            // value={nicknameInputValue}
            onChange={(e) => checkHandler(e, 'nickname')}
            ref={nicknameInputRef}
          ></FormInput>
          <div className="flex justify-center content-center">
            <Link href="/">
              <Button
                label="취소"
                btnType="normal"
                btnSize="medium"
                type="button"
              ></Button>
            </Link>

            <Button
              label="확인"
              btnType="active"
              btnSize="medium"
              type="submit"
            ></Button>
          </div>
        </form>
      </main>
    </>
  );
};

export default Signup;
